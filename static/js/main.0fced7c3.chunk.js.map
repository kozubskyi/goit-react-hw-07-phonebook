{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/Phonebook/Phonebook.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","url","getItems","state","contacts","items","getFilter","filter","getLoading","loading","ContactForm","onContactAdd","useState","name","setName","number","setNumber","formReset","className","onSubmit","event","preventDefault","map","contact","includes","alert","htmlFor","type","id","value","onChange","target","required","autoComplete","pattern","defaultProps","connect","selectors","dispatch","todo","actions","axios","post","then","data","catch","error","operations","Filter","onFilterChange","autoFocus","ContactList","onContactsFetch","onContactDelete","useEffect","toLowerCase","onClick","get","delete","Phonebook","App","itemsReducer","createReducer","_","action","payload","item","filterReducer","loadingReducer","contactsReducer","combineReducers","rootReducer","middleware","getDefaultMiddleware","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0VAEaA,EAAuBC,YAAa,kCACpCC,EAAuBD,YAAa,kCACpCE,EAAqBF,YAAa,gCAElCG,EAAoBH,YAAa,+BACjCI,EAAoBJ,YAAa,+BACjCK,EAAkBL,YAAa,6BAE/BM,EAAuBN,YAAa,kCACpCO,EAAuBP,YAAa,kCACpCQ,EAAqBR,YAAa,gCAElCS,EAAeT,YAAa,0BCXnCU,EAAM,iCCHCC,EAAW,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OACnCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QACpCC,EAAa,SAAAL,GAAK,OAAIA,EAAMC,SAASK,S,OCK5CC,EAAc,SAAC,GAA6B,IAA3BL,EAA0B,EAA1BA,MAAOM,EAAmB,EAAnBA,aAAmB,EACvBC,mBAAS,IADc,mBACxCC,EADwC,KAClCC,EADkC,OAEnBF,mBAAS,IAFU,mBAExCG,EAFwC,KAEhCC,EAFgC,KAqBzCC,EAAY,WAChBH,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAME,UAAU,kBAAkBC,SAff,SAAAC,GACnBA,EAAMC,iBACQhB,EAAMiB,KAAI,SAAAC,GAAO,OAAIA,EAAQV,QAErCW,SAASX,GAAQY,MAAM,GAAD,OAAIZ,EAAJ,6BAAsCF,EAAaE,EAAME,GAErFE,KASA,UACE,uBAAOS,QAAQ,uBAAf,kBACA,uBACEC,KAAK,OACLC,GAAG,uBACHf,KAAK,OACLgB,MAAOhB,EACPiB,SA9Ba,SAAAV,GACjBN,EAAQM,EAAMW,OAAOF,QA8BjBG,UAAQ,EACRC,aAAa,QAEf,uBAAOP,QAAQ,yBAAf,oBACA,uBACEC,KAAK,MACLC,GAAG,yBACHf,KAAK,SACLgB,MAAOd,EACPe,SApCe,SAAAV,GACnBJ,EAAUI,EAAMW,OAAOF,QAoCnBG,UAAQ,EACRC,aAAa,MACbC,QAAQ,cAEV,wBAAQhB,UAAU,MAAMS,KAAK,SAA7B,6BAeNjB,EAAYyB,aAAe,CACzB9B,MAAO,IAcM+B,mBAvBS,SAAAjC,GAAK,MAAK,CAChCE,MAAOgC,EAAmBlC,OAGD,SAAAmC,GAAQ,MAAK,CACtC3B,aAAc,SAACE,EAAME,GAAP,OAAkBuB,EFrDR,SAACzB,EAAME,GAAP,OAAkB,SAAAuB,GAE1C,IAAMC,EAAO,CAAE1B,OAAME,UAErBuB,EAASE,KAETC,IAAMC,KAAKzC,EAAKsC,GACbI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcN,EAASE,EAA0BI,OACtDC,OAAM,SAAAC,GAAK,OAAIR,EAASE,EAAwBM,QE6CVC,CAAsBlC,EAAME,QAkBxDqB,CAA6C1B,GCjFtDsC,G,MAAS,SAAC,GAAD,IAAGzC,EAAH,EAAGA,OAAQ0C,EAAX,EAAWA,eAAX,OACb,qCACE,uBAAO/B,UAAU,uBAAuBQ,QAAQ,6BAAhD,mCAGA,uBACEC,KAAK,SACLC,GAAG,6BACHf,KAAK,SACLK,UAAU,uBACVW,MAAOtB,EACPuB,SAAUmB,EACVjB,UAAQ,EACRC,aAAa,MACbiB,WAAS,SAafF,EAAOb,aAAe,CACpB5B,OAAQ,IAOK6B,mBAhBS,SAAAjC,GAAK,MAAK,CAChCI,OAAQJ,EAAMC,SAASG,WAGE,SAAA+B,GAAQ,MAAK,CACtCW,eAAgB,SAAA7B,GAAK,OAAIkB,EAASE,EAAqBpB,EAAMW,OAAOF,YAWvDO,CAA6CY,GCjCtDG,G,MAAc,SAAC,GAAkE,IAAhE9C,EAA+D,EAA/DA,MAAOE,EAAwD,EAAxDA,OAAQE,EAAgD,EAAhDA,QAAS2C,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,gBAM9D,OAJAC,qBAAU,WACRF,MACC,IAGH,qCACE,oBAAIlC,UAAU,iBAAd,SACGb,EACEE,QAAO,SAAAgB,GAAO,OAAIA,EAAQV,KAAK0C,cAAc/B,SAASjB,EAAOgD,kBAC7DjC,KAAI,gBAAGM,EAAH,EAAGA,GAAIf,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OACH,qBAAIG,UAAU,iBAAd,UACE,8BAAIL,EAAJ,KAAYE,KACZ,wBAAQY,KAAK,SAAST,UAAU,MAAMsC,QAAS,kBAAMH,EAAgBzB,IAArE,sBAFkCA,QAQzCnB,GAAW,gDAehB0C,EAAYhB,aAAe,CACzB9B,MAAO,GACPE,OAAQ,IAeK6B,mBA5BS,SAAAjC,GAAK,MAAK,CAChCE,MAAOgC,EAAmBlC,GAC1BI,OAAQ8B,EAAoBlC,GAC5BM,QAAS4B,EAAqBlC,OAGL,SAAAmC,GAAQ,MAAK,CACtCc,gBAAiB,kBAAMd,GJjCU,SAAAA,GAEjCA,EAASE,KAETC,IAAMgB,IAAIxD,GACP0C,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcN,EAASE,EAA6BI,OACzDC,OAAM,SAAAC,GAAK,OAAIR,EAASE,EAA2BM,WI4BtDO,gBAAiB,SAAAzB,GAAE,OAAIU,EJbI,SAAAV,GAAE,OAAI,SAAAU,GAEjCA,EAASE,KAETC,IAAMiB,OAAN,UAAgBzD,EAAhB,YAAuB2B,IACpBe,MAAK,kBAAML,EAASE,EAA6BZ,OACjDiB,OAAM,SAAAC,GAAK,OAAIR,EAASE,EAA2BM,QIOtBC,CAAyBnB,QAoB5CQ,CAA6Ce,GC5C7CQ,EAVG,kBAChB,qCACE,oBAAIzC,UAAU,aAAd,uBACA,cAAC,EAAD,IACA,oBAAIA,UAAU,kBAAd,sBACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,MCFW0C,I,IAAAA,EAJf,WACE,OAAO,cAAC,EAAD,K,sBCFHC,EAAeC,YAAc,IAAD,mBAC/BtB,GAAwC,SAACuB,EAAGC,GAAJ,OAAeA,EAAOC,WAD/B,cAE/BzB,GAAqC,SAACrC,EAAO6D,GAAR,4BAAuB7D,GAAvB,CAA8B6D,EAAOC,aAF3C,cAG/BzB,GAAwC,SAACrC,EAAO6D,GAAR,OAAmB7D,EAAMI,QAAO,SAAA2D,GAAI,OAAIA,EAAKtC,KAAOoC,EAAOC,cAHpE,IAM5BE,EAAgBL,YAAc,GAAD,eAChCtB,GAAgC,SAACuB,EAAGC,GAAJ,OAAeA,EAAOC,YAGnDG,EAAiBN,aAAc,GAAD,mBACjCtB,GAAwC,kBAAM,KADb,cAEjCA,GAAwC,kBAAM,KAFb,cAGjCA,GAAsC,kBAAM,KAHX,cAKjCA,GAAqC,kBAAM,KALV,cAMjCA,GAAqC,kBAAM,KANV,cAOjCA,GAAmC,kBAAM,KAPR,cASjCA,GAAwC,kBAAM,KATb,cAUjCA,GAAwC,kBAAM,KAVb,cAWjCA,GAAsC,kBAAM,KAXX,IAcvB6B,EAAkBC,YAAgB,CAC7CjE,MAAOwD,EACPtD,OAAQ4D,EACR1D,QAAS2D,IC5BLG,EAAcD,YAAgB,CAClClE,SAAUiE,IAGNG,EAAU,YAAOC,eAURC,EANDC,YAAe,CAC3BC,QAASL,EACTM,UAAUC,EACVN,eCRFO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGNQ,SAASC,eAAe,W","file":"static/js/main.0fced7c3.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('phonebook/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('phonebook/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('phonebook/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('phonebook/addContactRequest');\r\nexport const addContactSuccess = createAction('phonebook/addContactSuccess');\r\nexport const addContactError = createAction('phonebook/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('phonebook/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('phonebook/deleteContactSuccess');\r\nexport const deleteContactError = createAction('phonebook/deleteContactError');\r\n\r\nexport const changeFilter = createAction('phonebook/changeFilter');\r\n","import axios from 'axios';\r\nimport * as actions from './contacts-actions'\r\n\r\nconst url = 'http://localhost:4040/contacts';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios.get(url)\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactsError(error)))\r\n\r\n}\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n\r\n  const todo = { name, number };\r\n\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios.post(url, todo)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)))\r\n}\r\n\r\nexport const deleteContact = id => dispatch => {\r\n\r\n  dispatch(actions.deleteContactRequest());\r\n\r\n  axios.delete(`${url}/${id}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(id)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)))\r\n}","export const getItems = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getLoading = state => state.contacts.loading;\r\n// мемоизация не нужна","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactForm.scss';\r\nimport * as operations from '../../redux/contacts/contacts-operations';\r\nimport * as selectors from '../../redux/contacts/contacts-selectors';\r\n\r\nconst ContactForm = ({ items, onContactAdd }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const changeName = event => {\r\n    setName(event.target.value);\r\n  }\r\n\r\n  const changeNumber = event => {\r\n    setNumber(event.target.value);\r\n  }\r\n\r\n  const onFormSubmit = event => {\r\n    event.preventDefault();\r\n    const names = items.map(contact => contact.name);\r\n\r\n    names.includes(name) ? alert(`${name} is already in contacts.`) : onContactAdd(name, number);\r\n\r\n    formReset();\r\n  };\r\n\r\n  const formReset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className=\"Phonebook__form\" onSubmit={onFormSubmit}>\r\n      <label htmlFor=\"Phonebook-form__name\">Name</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"Phonebook-form__name\"\r\n        name=\"name\"\r\n        value={name}\r\n        onChange={changeName}\r\n        required\r\n        autoComplete=\"off\"\r\n      ></input>\r\n      <label htmlFor=\"Phonebook-form__number\">Number</label>\r\n      <input\r\n        type=\"tel\"\r\n        id=\"Phonebook-form__number\"\r\n        name=\"number\"\r\n        value={number}\r\n        onChange={changeNumber}\r\n        required\r\n        autoComplete=\"off\"\r\n        pattern=\"^[ 0-9]+$\"\r\n      ></input>\r\n      <button className=\"btn\" type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  items: selectors.getItems(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onContactAdd: (name, number) => dispatch(operations.addContact(name, number)),\r\n});\r\n\r\nContactForm.defaultProps = {\r\n  items: [],\r\n};\r\n\r\nContactForm.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n  onContactAdd: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './Filter.scss';\r\nimport * as actions from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ filter, onFilterChange }) => (\r\n  <>\r\n    <label className=\"find-contacts__label\" htmlFor=\"find-contacts-form__filter\">\r\n      Find contacts by name\r\n    </label>\r\n    <input\r\n      type=\"search\"\r\n      id=\"find-contacts-form__filter\"\r\n      name=\"filter\"\r\n      className=\"find-contacts__input\"\r\n      value={filter}\r\n      onChange={onFilterChange}\r\n      required\r\n      autoComplete=\"off\"\r\n      autoFocus\r\n    ></input>\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onFilterChange: event => dispatch(actions.changeFilter(event.target.value)),\r\n});\r\n\r\nFilter.defaultProps = {\r\n  filter: '',\r\n};\r\n\r\nFilter.propTypes = {\r\n  onFilterChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactList.scss';\r\nimport * as operations from '../../redux/contacts/contacts-operations';\r\nimport * as selectors from '../../redux/contacts/contacts-selectors'\r\n\r\nconst ContactList = ({ items, filter, loading, onContactsFetch, onContactDelete }) => {\r\n\r\n  useEffect(() => {\r\n    onContactsFetch();\r\n  }, [])\r\n\r\n  return (\r\n  <>\r\n    <ul className=\"contacts__list\">\r\n      {items\r\n        .filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\r\n        .map(({ id, name, number }) => (\r\n          <li className=\"contacts__item\" key={id}>\r\n            <p>{name}: {number}</p>\r\n            <button type=\"button\" className=\"btn\" onClick={() => onContactDelete(id)}>\r\n              Delete\r\n            </button>\r\n          </li>)\r\n      )}\r\n    </ul>\r\n    {loading && <p>Loading...</p>}\r\n  </>\r\n)};\r\n\r\nconst mapStateToProps = state => ({\r\n  items: selectors.getItems(state),\r\n  filter: selectors.getFilter(state),\r\n  loading: selectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onContactsFetch: () => dispatch(operations.fetchContacts()),\r\n  onContactDelete: id => dispatch(operations.deleteContact(id)),\r\n});\r\n\r\nContactList.defaultProps = {\r\n  items: [],\r\n  filter: '',\r\n};\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n  filter: PropTypes.string,\r\n  onContactDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import './Phonebook.scss';\r\nimport ContactForm from '../ContactForm';\r\nimport Filter from '../Filter';\r\nimport ContactList from '../ContactList';\r\n\r\nconst Phonebook = () => (\r\n  <>\r\n    <h1 className=\"main-title\">Phonebook</h1>\r\n    <ContactForm />\r\n    <h2 className=\"title__contacts\">Contacts</h2>\r\n    <Filter />\r\n    <ContactList />\r\n  </>\r\n);\r\n\r\nexport default Phonebook;\r\n","import React from 'react';\nimport Phonebook from './components/Phonebook';\n\nimport './App.scss';\n\nfunction App() {\n  return <Phonebook />;\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './contacts-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [actions.fetchContactsSuccess/*.type*/]: (_, action) => action.payload,\r\n  [actions.addContactSuccess/*.type*/]: (state, action) => [...state, action.payload],\r\n  [actions.deleteContactSuccess/*.type*/]: (state, action) => state.filter(item => item.id !== action.payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n  [actions.changeFilter/*.type*/]: (_, action) => action.payload,\r\n});\r\n\r\nconst loadingReducer = createReducer(false, {\r\n  [actions.fetchContactsRequest/*.type*/]: () => true,\r\n  [actions.fetchContactsSuccess/*.type*/]: () => false,\r\n  [actions.fetchContactsError/*.type*/]: () => false,\r\n\r\n  [actions.addContactRequest/*.type*/]: () => true,\r\n  [actions.addContactSuccess/*.type*/]: () => false,\r\n  [actions.addContactError/*.type*/]: () => false,\r\n\r\n  [actions.deleteContactRequest/*.type*/]: () => true,\r\n  [actions.deleteContactSuccess/*.type*/]: () => false,\r\n  [actions.deleteContactError/*.type*/]: () => false,\r\n})\r\n\r\nexport const contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  loading: loadingReducer,\r\n});\r\n","import { configureStore, getDefaultMiddleware, combineReducers } from '@reduxjs/toolkit';\r\nimport { contactsReducer } from '../redux/contacts/contacts-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst middleware = [...getDefaultMiddleware()];\r\n\r\n// STORE\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}